// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  public_key, private_key
) VALUES (
  $1, $2
)
RETURNING id, amount, nonce, sign, public_key, private_key
`

type CreateAccountParams struct {
	PublicKey  string `json:"public_key"`
	PrivateKey string `json:"private_key"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.PublicKey, arg.PrivateKey)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Nonce,
		&i.Sign,
		&i.PublicKey,
		&i.PrivateKey,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, amount, nonce, sign, public_key, private_key FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Nonce,
		&i.Sign,
		&i.PublicKey,
		&i.PrivateKey,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, amount, nonce, sign, public_key, private_key FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccount(ctx context.Context, arg ListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Nonce,
			&i.Sign,
			&i.PublicKey,
			&i.PrivateKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET Amount = Amount + $2
WHERE id = $1
RETURNING id, amount, nonce, sign, public_key, private_key
`

type UpdateAccountParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Nonce,
		&i.Sign,
		&i.PublicKey,
		&i.PrivateKey,
	)
	return i, err
}
